name: CI/CD Pipeline üöÄ

# K√≠ch ho·∫°t workflow khi c√≥ push ho·∫∑c pull request ƒë·∫øn nh√°nh dev
on:
  push:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # B∆∞·ªõc 1: Checkout code t·ª´ repository
      - name: Checkout code üìù
        uses: actions/checkout@v2

      # B∆∞·ªõc 2: Thi·∫øt l·∫≠p Docker Buildx
      - name: Set up Docker Buildx üõ†Ô∏è
        uses: docker/setup-buildx-action@v1

      # B∆∞·ªõc 3: Cache Docker layers ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô build
      - name: Cache Docker layers ‚ö°
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

        # B∆∞·ªõc 4: Ch·∫°y npm i  ƒë·ªÉ c√†i ƒë·∫∑t
      - name: Install exact dependencies üì¶
        run: npm i --legacy-peer-deps

      # B∆∞·ªõc 5: Verify code quality and run tests üõ°Ô∏è
      - name: Verify code quality and run tests ‚úÖ
        run: |
          # Ki·ªÉm tra c√∫ ph√°p v·ªõi ESLint
          npx eslint .
      # B∆∞·ªõc 6: Export GitHub Secrets as environment variables
      - name: Export secrets as environment variables
        run: |
          echo "NEXT_PUBLIC_API_KEY=${{ secrets.NEXT_PUBLIC_API_KEY }}" >> .env
          echo "NEXT_PUBLIC_TMDB_URL=${{ secrets.NEXT_PUBLIC_TMDB_URL }}" >> .env
          echo "NEXT_PUBLIC_TMDB_URL_IMAGE=${{ secrets.NEXT_PUBLIC_TMDB_URL_IMAGE }}" >> .env
          echo "NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }}" >> .env
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "GITHUB_ID=${{ secrets.GH_ID }}" >> .env
          echo "GITHUB_SECRET=${{ secrets.GH_SECRET }}" >> .env
          echo "EMAIL_SERVER=${{ secrets.EMAIL_SERVER }}" >> .env
          echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env
          echo "NEXT_SHARP_PATH=${{ secrets.NEXT_SHARP_PATH }}" >> .env

      # B∆∞·ªõc 7: Build Docker image üèóÔ∏è
      - name: Build Docker image üõ†Ô∏è
        run: |
          docker build . \
           --file Dockerfile \
           --tag nextjs-app \
          --build-arg NEXT_PUBLIC_API_KEY=${{ secrets.NEXT_PUBLIC_API_KEY }} \
          --build-arg NEXT_PUBLIC_TMDB_URL=${{ secrets.NEXT_PUBLIC_TMDB_URL }} \
          --build-arg NEXT_PUBLIC_TMDB_URL_IMAGE=${{ secrets.NEXT_PUBLIC_TMDB_URL_IMAGE }} \
          --build-arg NEXT_PUBLIC_URL=${{ secrets.NEXT_PUBLIC_URL }} \
          --build-arg NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }} \
          --build-arg GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
          --build-arg GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
          --build-arg GITHUB_ID=${{ secrets.GH_ID }} \
          --build-arg GITHUB_SECRET=${{ secrets.GH_SECRET }} \
          --build-arg EMAIL_SERVER=${{ secrets.EMAIL_SERVER }} \
          --build-arg EMAIL_FROM=${{ secrets.EMAIL_FROM }} \
          --build-arg NEXT_SHARP_PATH=${{ secrets.NEXT_SHARP_PATH }}
      # B∆∞·ªõc 8: Run Docker Compose üê≥
      - name: Run Docker Compose üöÄ
        run: docker-compose up -d

      # B∆∞·ªõc 9: Initialize CodeQL üîç
      - name: Initialize CodeQL üîç
        uses: github/codeql-action/init@v1
        with:
          languages: javascript,typescript

      # B∆∞·ªõc 10: Perform CodeQL Analysis üìà
      - name: Perform CodeQL Analysis üïµÔ∏è
        uses: github/codeql-action/analyze@v1
